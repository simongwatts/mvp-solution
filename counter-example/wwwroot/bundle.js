(()=>{"use strict";const e={IncrementRequestedEvent:["ViewEvent"],CounterUpdatedEvent:["ModelEvent"]};class t{}class n{}class s extends n{}class o extends t{constructor(e){console.log("constructor CounterUpdatedEvent"),super(),this.newCount=e}}class c{constructor(e,t,n){this.view=e,this.model=t,this.eventBus=n,this.subscriptions=[],console.log("constructor PresenterBase"),this.initialize()}initialize(){console.log("Subscribe to concrete base events"),this.subscribe(n,(e=>this.onViewEvent(e))),this.subscribe(t,(e=>this.onModelEvent(e)))}onViewEvent(e){}onModelEvent(e){}subscribe(e,t){this.subscriptions.push(this.eventBus.subscribe(e,t))}dispose(){this.subscriptions.forEach((e=>e())),this.subscriptions=[]}}const i=new class{constructor(){this.subscriptions=new Map}publish(e){console.log("EventAggregator publish"),this.getEventTypeHierarchy(e).forEach((t=>{(this.subscriptions.get(t)||new Set).forEach((t=>t(e)))}))}subscribe(e,t){console.log("EventAggregator subscribe");const n=e.name,s=this.subscriptions.get(n)||new Set;return s.add(t),this.subscriptions.set(n,s),()=>this.unsubscribe(n,t)}unsubscribe(e,t){console.log("EventAggregator unsubscribe");const n=this.subscriptions.get(e);n&&(n.delete(t),0===n.size&&this.subscriptions.delete(e))}getEventTypeHierarchy(t){console.log("EventAggregator getEventTypeHierarchy");const n=[],s=t.constructor.name;return console.log("eventName: "+s),n.push(s),e[s]&&n.push(...e[s]),n}},r=new class{constructor(e){this.eventBus=e,console.log("constructor CounterView"),this.countElement=document.getElementById("count");const t=document.getElementById("increment-btn");if(!(t instanceof HTMLButtonElement))throw new Error("Increment button not found or is not a button element");this.incrementButton=t,this.incrementButton.textContent="Increment Me",this.incrementButton.addEventListener("click",(()=>{console.log("Increment button clicked"),this.eventBus.publish(new s)}))}updateCount(e){console.log("updateCount"),this.countElement.textContent=e.toString()}}(i),u=new class{constructor(e){this.eventBus=e,this.count=0}increment(){console.log("increment"),this.count++,this.eventBus.publish(new o(this.count))}}(i);new class extends c{constructor(e,t,n){console.log("constructor CounterPresenter"),super(e,t,n)}onViewEvent(e){console.log("onViewEvent"),e instanceof s&&(console.log("IncrementRequestedEvent"),this.model.increment())}onModelEvent(e){console.log("onModelEvent"),e instanceof o&&(console.log("CounterUpdatedEvent"),this.view.updateCount(e.newCount))}}(r,u,i)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,