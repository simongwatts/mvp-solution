(()=>{"use strict";class t{}class e extends t{}class s{}class n extends s{}class i extends s{}class c extends t{constructor(t){super(),this.newCount=t}}class o{constructor(t,e,s){this.view=t,this.model=e,this.eventBus=s,this.subscriptions=[],this.initialize()}initialize(){this.subscribe(n,(t=>this.onViewEvent(t))),this.subscribe(e,(t=>this.onModelEvent(t)))}onViewEvent(t){}onModelEvent(t){}subscribe(t,e){this.subscriptions.push(this.eventBus.subscribe(t,e))}dispose(){this.subscriptions.forEach((t=>t())),this.subscriptions=[]}}const u=new class{constructor(){this.subscriptions=new Map}publish(t){this.getEventTypeHierarchy(t).forEach((e=>{(this.subscriptions.get(e)||new Set).forEach((e=>e(t)))}))}subscribe(t,e){const s=t.name,n=this.subscriptions.get(s)||new Set;return n.add(e),this.subscriptions.set(s,n),()=>this.unsubscribe(s,e)}unsubscribe(t,e){const s=this.subscriptions.get(t);s&&(s.delete(e),0===s.size&&this.subscriptions.delete(t))}getEventTypeHierarchy(t){const e=[];let s=Object.getPrototypeOf(t);for(;null!==s;){const t=s.constructor.name;"Object"!==t&&(e.push(t),e.push(...this.getBaseTypes(s))),s=Object.getPrototypeOf(s)}return[...new Set(e)]}getBaseTypes(t){const e=[];let s=Object.getPrototypeOf(t);for(;s&&s!==Object.prototype;){const t=s.constructor.name;"Object"!==t&&e.push(t),s=Object.getPrototypeOf(s)}return e}},r=new class{constructor(t){this.eventBus=t,this.countElement=document.getElementById("count"),this.incrementButton=document.createElement("button"),this.incrementButton.textContent="Increment",this.incrementButton.addEventListener("click",(()=>{this.eventBus.publish(new i)})),document.body.append(this.countElement,this.incrementButton)}updateCount(t){this.countElement.textContent=t.toString()}}(u),h=new class{constructor(t){this.eventBus=t,this.count=0}increment(){this.count++,this.eventBus.publish(new c(this.count))}}(u);new class extends o{constructor(t,e,s){super(t,e,s)}onViewEvent(t){t instanceof i&&this.model.increment()}onModelEvent(t){t instanceof c&&this.view.updateCount(t.newCount)}}(r,h,u)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,